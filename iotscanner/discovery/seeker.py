import re


class Seeker:

    IP_RANGE_REGEX = r"\d+\.\d+\.\d+\.\d+\/\d+"
    SINGLE_IP_REGEX = r"\d+\.\d+\.\d+\.\d+"

    def __init__(self, ip_range):
        if re.match(Seeker.IP_RANGE_REGEX, ip_range):
            address, prefix_len = ip_range.strip().split('/')
            prefix_bytes = int(prefix_len) / 8

            self.address_possibilities = []
            for address_byte in address.split('.'):
                if prefix_bytes >= 1:
                    prefix_bytes -= 1
                    self.address_possibilities.append([int(address_byte)])
                else:
                    self.address_possibilities.append(range(256))
        elif re.match(Seeker.SINGLE_IP_REGEX, ip_range):
            address_bytes = ip_range.split('.')
            self.address_possibilities = [[x] for x in address_bytes]
        else:
            raise IPFormatException()

    def ips(self):
        for b0 in self.address_possibilities[0]:
            for b1 in self.address_possibilities[1]:
                for b2 in self.address_possibilities[2]:
                    for b3 in self.address_possibilities[3]:
                        yield f'{b0}.{b1}.{b2}.{b3}'


class IPFormatException(Exception):
    def __init__(self):
        super().__init__("IP range format exception")


if __name__ == '__main__':
    seeker = Seeker("192.168.1.0/16")
    for ip in seeker.ips():
        print(ip)
