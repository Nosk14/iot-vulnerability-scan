from datetime import datetime
from functools import reduce


class CSVReport:

    def __init__(self, devices, vulnerabilities):
        self.devices = devices
        self.vulnerabilities = vulnerabilities

    def __generate_lines(self):
        yield "ip;service;title;risk;cve\n"
        for device in self.devices:
            if not device.exposed_services:
                yield f"{device.ip};;;;\n"
            else:
                for service in device.exposed_services:
                    if service in self.vulnerabilities:
                        for vulnerability in self.vulnerabilities[service]:
                            yield f"{device.ip};{service};{vulnerability['title']};{vulnerability['risk']};{vulnerability['cve']}\n"
                    else:
                        yield f"{device.ip};{service};;;\n"

    def save(self, filename):
        with open(filename, 'w') as outfile:
            outfile.writelines(self.__generate_lines())


class ConsoleReport:

    def __init__(self, devices, vulnerabilities):
        self.devices = devices
        self.vulnerabilities = vulnerabilities

    def __generate_lines(self):
        yield "IP\tSERVICE\tTITLE\tRISK\tCVE"
        for device in self.devices:
            if not device.exposed_services:
                yield f"{device.ip}\t\t\t\t"
            else:
                for service in device.exposed_services:
                    if service in self.vulnerabilities:
                        for vulnerability in self.vulnerabilities[service]:
                            yield f"{device.ip}\t{service}\t{vulnerability['title']}\t{vulnerability['risk']}\t{vulnerability['cve']}"
                    else:
                        yield f"{device.ip}\t{service}\t\t\t"

    def print(self):
        for line in self.__generate_lines():
            print(line)


class HTMLReport:

    TEMPLATE = """
    <!DOCTYPE html>
<html>
<head>
    <style>
    table, th, td {{
  border: 1px solid black;
  border-collapse: collapse;
  padding: 10px;
  margin-left: 10%;
  margin-right: 10%;
}}

tr {{ background-color: #8EDB90 }}

body {{
    background-color: #5FC660;
}}

    </style>
    <title>IoT scan report</title>
</head>
<body>
<h1>IoT Scan Report</h1>
<br>
<table style="width:80%">
    <tr style="background-color: #3CA33E">
        <th>Scan mask</th>
        <th>Devices found</th>
        <th>Total vulnerabilities found</th>
        <th>Date</th>
    </tr>
    <tr style="text-align:center">
        <td>{mask}</td>
        <td>{num_devices}</td>
        <td>{num_vuls}</td>
        <td>{date}</td>
    </tr>
</table>
<br>
<table style="width:80%">
    <tr style="background-color: #3CA33E">
        <th>Device IP</th>
        <th>Service</th>
        <th>Vulnerability title</th>
        <th>Risk</th>
        <th>CVE</th>
    </tr>
    {report}
</table>
</body>
</html>
    """

    def __init__(self, devices, vulnerabilities, scan_mask):
        self.devices = devices
        self.vulnerabilities = vulnerabilities
        self.scan_mask = scan_mask

    def __get_formatted_data(self):
        ret = ""
        for device in self.devices:
            if not device.exposed_services:
                ret += f"<tr><td>{device.ip}</td><td></td><td></td><td></td><td></td></tr>"
            else:
                for service in device.exposed_services:
                    if service in self.vulnerabilities:
                        for vulnerability in self.vulnerabilities[service]:
                            ret += f"<tr><td>{device.ip}</td><td>{service}</td><td>{vulnerability['title']}</td><td>{vulnerability['risk']}</td><td>{vulnerability['cve']}</td></tr>"
                    else:
                        ret += f"<tr><td>{device.ip}</td><td>{service}</td><td></td><td></td><td></td></tr>"
        if not ret:
            return '<tr><td colspan="6">No devices found</td></tr>'

        return ret

    def __generate_text(self):
        return self.TEMPLATE.format(
            report=self.__get_formatted_data(),
            date=str(datetime.now()),
            mask=self.scan_mask,
            num_devices=len(self.devices),
            num_vuls= 0 if not self.vulnerabilities else len(reduce(lambda a,b: a + b, self.vulnerabilities.values()))
        )

    def save(self, filename):
        with open(filename, 'w') as outfile:
            outfile.writelines(self.__generate_text())