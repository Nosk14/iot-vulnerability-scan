from iotscanner.discovery.seeker import Seeker
from iotscanner.classify.classifier import Classifier
from iotscanner.analysis.analizer import DeviceAnalysis
from iotscanner.analysis.vuldb import Vuldb
from iotscanner.reporting.reporters import CSVReport, ConsoleReport, HTMLReport
from iotscanner.config import AppConfig
from multiprocessing import Pool
from datetime import datetime
from time import time
import logging


logging.basicConfig(format='%(asctime)-15s | %(message)s', level=AppConfig.loglevel)


def do_concurrently(func, iterator, concurrency_level=AppConfig.concurrency):
    pool = Pool(concurrency_level)
    results = pool.map(func, iterator)
    pool.close()
    pool.join()

    return results


def scan_device(ip):
    di = DeviceAnalysis(ip)
    di.analyze()
    return di


def is_iot_device(ip):
    classifier = Classifier(ip)
    classifier.start()
    return classifier


def run():
    begin_time = time()
    if not AppConfig.vuldb_key:
        raise Exception("A VulDB key must be set in config")

    seeker = Seeker(AppConfig.ip_mask)
    ips = seeker.ips()

    logging.info("Searching for IoT devices")
    iot_devices = do_concurrently(is_iot_device, ips)
    iot_devices = [r.ip for r in iot_devices if r.is_iot]
    logging.info("IoT devices found: {0}".format(len(iot_devices)))

    logging.info("Getting exposed services from devices")
    scan_results = do_concurrently(scan_device, iot_devices)
    exposed_services = set()
    for sr in scan_results:
        for s in sr.exposed_services:
            exposed_services.add(s)
    logging.info("Found {0} different services".format(len(exposed_services)))

    logging.info("Looking for vulnerabilities")
    vulnerabilities = {}
    vuldb = Vuldb(AppConfig.vuldb_key)
    for exposed_service in exposed_services:
        rs = vuldb.search(exposed_service)
        vuls = []
        for entry in rs:
            vul_info = {
                'title': entry['entry']['title'],
                'risk': entry['vulnerability']['risk']['name'],
                'cve': entry['source']['cve']['id'],
            }
            vuls.append(vul_info)
        if len(vuls) > 0:
            vulnerabilities[exposed_service] = vuls

    logging.info("Services with vulnerabilities: {0}".format(len(vulnerabilities.keys())))
    logging.info("Scan took {0} seconds".format(time() - begin_time))

    outdir = AppConfig.outdir
    if outdir and outdir[-1] != '/':
        outdir += '/'

    if 'csv' in AppConfig.report_types:
        csvr = CSVReport(scan_results, vulnerabilities)
        filename = datetime.now().strftime("%d%m%YT%H%M%S") + ".csv"
        csvr.save(outdir + filename )
        logging.info(f"Generated report [{filename}] on [{outdir}]")

    if 'html' in AppConfig.report_types:
        htmlr = HTMLReport(scan_results, vulnerabilities, AppConfig.ip_mask)
        filename = datetime.now().strftime("%d%m%YT%H%M%S") + ".html"
        htmlr.save(outdir + filename)
        logging.info(f"Generated report [{filename}] on [{outdir}]")

    if 'stdout' in AppConfig.report_types:
        consoler = ConsoleReport(scan_results, vulnerabilities)
        consoler.print()

    logging.shutdown()


if __name__ == '__main__':
    run()
