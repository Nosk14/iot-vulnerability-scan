import logging
from nmap3 import Nmap, NmapScanTechniques
from iotscanner.classify import get_mac_info, get_mac_vendor, device_port_fingerprints, iot_vendors, iot_os, ports_to_scan

logging.getLogger("urllib3").setLevel(logging.ERROR)


class Classifier:

    def __init__(self, ip):
        self.ip = ip
        self.is_iot = None
        self.__nmap = Nmap()
        self.__device_vendor = set()
        self.__device_type = set()
        self.__device_os_family = set()
        self.__device_os_name = set()
        self.__device_mac = None
        self.__device_mac_vendor = None
        self.__ports_to_scan = ports_to_scan

    def start(self):
        logging.debug("Determining if [" + self.ip + "] is an IoT device")
        self.__get_device_info()
        self.__check_vendor()
        if not self.is_iot:
            self.__check_os()
        if not self.is_iot:
            self.__check_port_fingerprinting()

    def __get_device_info(self):
        results = []
        try:
            results = self.__nmap.nmap_os_detection(self.ip)
        except Exception as e:
            logging.warning(e)
        self.__device_mac, self.__device_mac_vendor = get_mac_info(self.ip)

        if self.__device_mac:
            self.__device_mac_vendor = get_mac_vendor(self.__device_mac)

        for result in results:
            if int(result['accuracy']) > 95:
                if 'osclass' in result:
                    os_info = result['osclass']
                    self.__device_os_family.add(os_info.get('osfamily'))
                    self.__device_os_name.add(os_info.get('name'))
                    self.__device_type.add(os_info.get('type'))
                    self.__device_vendor.add(os_info.get('vendor'))

    def __check_vendor(self):
        if self.__device_mac_vendor:
            for iot_vendor in iot_vendors:
                if iot_vendor in self.__device_mac_vendor.lower():
                    self.is_iot = True

    def __check_os(self):
        for device_os in self.__device_os_name:
            for os in iot_os:
                if os in device_os.lower():
                    self.is_iot = True

    def __check_port_fingerprinting(self):
        opened_ports = self.__get_opened_ports()
        for fingerprint in device_port_fingerprints.values():
            if fingerprint == opened_ports:
                self.is_iot = True

    def __get_opened_ports(self):
        open_ports = set()
        port_scanner = NmapScanTechniques()
        ports = list(self.__ports_to_scan)
        for port_chunk in [ports[x:x + 10] for x in range(0, len(ports), 10)]:
            ports_param = ','.join([str(x) for x in port_chunk])
            result = port_scanner.nmap_tcp_scan(self.ip, args=f"-p {ports_param}")
            if self.ip in result:
                for port_result in result[self.ip]:
                    state = port_result['state']
                    if state == 'open':
                        try:
                            open_ports.add(int(port_result['portid']))
                        except Exception:
                            logging.error(port_result)
        return open_ports

    def __str__(self):
        return "{" + self.ip + ", " + str(self.__device_vendor) + ", " + str(self.__device_type) + ", " + str(
            self.__device_os_name) + ", " + str(self.__device_os_family) + ", " + str(self.__device_mac) + ", " + str(
            self.__device_mac_vendor) + "}"
