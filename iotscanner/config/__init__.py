from configparser import ConfigParser
from importlib.resources import path
import argparse

config_file = ConfigParser()
with path('iotscanner.config', 'config.ini') as p:
    config_file.read(p)

parser = argparse.ArgumentParser(description='Scan a network to find vulnerable IoT devices.')
parser.add_argument('--concurrency', help='Number of processes to create for the scan.')
parser.add_argument('--loglevel', help='Minimum level of logs to print.')
parser.add_argument('--ip-mask', help='Mask used to get the range of IPs to scan.')
parser.add_argument('--vuldb-key', help='VulDB API key.')
parser.add_argument('--output-directory', help='Directory path to store reports.')
parser.add_argument('--report', action='append', choices=['stdout', 'csv', 'html'], help='Type of report you want to generate.')

params = parser.parse_args()


def _parse_report_types(report_value):
    return [v.strip().lower() for v in report_value.split(',')]


class AppConfig:
    loglevel = params.loglevel if params.loglevel else config_file['logging']['level']
    concurrency = int(params.concurrency if params.concurrency else config_file['system']['concurrency'])
    ip_mask = params.ip_mask if params.ip_mask else config_file['discovery']['ip-range']
    vuldb_key = params.vuldb_key if params.vuldb_key else config_file['analysis']['vuldb_key']
    outdir = params.output_directory if params.output_directory else config_file['report']['outdir']
    report_types = params.report if params.report else _parse_report_types(config_file['report']['types'])

